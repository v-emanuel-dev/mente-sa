package com.example.mentesa

import android.app.Application
import android.util.Log
import androidx.lifecycle.AndroidViewModel
import androidx.lifecycle.viewModelScope
import com.google.ai.client.generativeai.GenerativeModel
import com.google.ai.client.generativeai.type.Content
import com.google.ai.client.generativeai.type.GenerateContentResponse
import com.google.ai.client.generativeai.type.RequestOptions
import com.google.ai.client.generativeai.type.content
import com.example.mentesa.data.db.AppDatabase
import com.example.mentesa.data.db.ChatDao
import com.example.mentesa.data.db.ChatMessageEntity
import com.example.mentesa.data.db.ConversationInfo
import com.example.mentesa.data.db.ConversationMetadataDao
import com.example.mentesa.data.db.ConversationMetadataEntity
import com.google.firebase.auth.FirebaseAuth
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.ExperimentalCoroutinesApi
import kotlinx.coroutines.delay
import kotlinx.coroutines.flow.*
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale

enum class LoadingState { IDLE, LOADING, ERROR }

const val NEW_CONVERSATION_ID = -1L
private const val MAX_HISTORY_MESSAGES = 20

@OptIn(ExperimentalCoroutinesApi::class)
class ChatViewModel(application: Application) : AndroidViewModel(application) {

    private val appDb = AppDatabase.getDatabase(application)
    private val chatDao: ChatDao = appDb.chatDao()
    private val metadataDao: ConversationMetadataDao = appDb.conversationMetadataDao()
    private val auth = FirebaseAuth.getInstance()

    // Current user ID from Firebase
    private val currentUserId: String
        get() = auth.currentUser?.uid ?: "local_user"

    private val _currentConversationId = MutableStateFlow<Long?>(null)
    val currentConversationId: StateFlow<Long?> = _currentConversationId.asStateFlow()

    private val _loadingState = MutableStateFlow(LoadingState.IDLE)
    val isLoading: StateFlow<Boolean> = _loadingState.map { it == LoadingState.LOADING }
        .stateIn(
            scope = viewModelScope,
            started = SharingStarted.WhileSubscribed(5000L),
            initialValue = false
        )

    private val _errorMessage = MutableStateFlow<String?>(null)
    val errorMessage: StateFlow<String?> = _errorMessage.asStateFlow()

    private val rawConversationsFlow: Flow<List<ConversationInfo>> = chatDao.getConversationsForUser(currentUserId)
        .catch { e ->
            Log.e("ChatViewModel", "Error loading raw conversations flow", e)
            _errorMessage.value = "Erro ao carregar lista de conversas (raw)."
            emit(emptyList())
        }

    private val metadataFlow: Flow<List<ConversationMetadataEntity>> = metadataDao.getMetadataForUser(currentUserId)
        .catch { e ->
            Log.e("ChatViewModel", "Error loading metadata flow", e)
            emit(emptyList())
        }

    val conversationListForDrawer: StateFlow<List<ConversationDisplayItem>> =
        combine(rawConversationsFlow, metadataFlow) { conversations, metadataList ->
            Log.d("ChatViewModel", "Combining ${conversations.size} convs and ${metadataList.size} metadata entries.")
            val metadataMap = metadataList.associateBy({ it.conversationId }, { it.customTitle })

            conversations.map { convInfo ->
                val customTitle = metadataMap[convInfo.id]?.takeIf { it.isNotBlank() }
                val finalTitle = customTitle ?: generateFallbackTitle(convInfo.id)

                // Determinar o tipo de conversa com base no t√≠tulo ou no primeiro texto
                val conversationType = determineConversationType(finalTitle, convInfo.id)

                ConversationDisplayItem(
                    id = convInfo.id,
                    displayTitle = finalTitle,
                    lastTimestamp = convInfo.lastTimestamp,  // Garantir que est√° usando lastTimestamp
                    conversationType = conversationType
                )
            }
        }
            .flowOn(Dispatchers.Default)
            .catch { e ->
                Log.e("ChatViewModel", "Error combining conversations and metadata", e)
                withContext(Dispatchers.Main.immediate) {
                    _errorMessage.value = "Erro ao processar lista de conversas para exibi√ß√£o."
                }
                emit(emptyList())
            }
            .stateIn(
                scope = viewModelScope,
                started = SharingStarted.Eagerly,
                initialValue = emptyList()
            )

    val messages: StateFlow<List<ChatMessage>> = _currentConversationId.flatMapLatest { convId ->
        Log.d("ChatViewModel", "[State] CurrentConversationId changed: $convId")
        when (convId) {
            null, NEW_CONVERSATION_ID -> {
                flowOf(listOf(ChatMessage(welcomeMessageText, Sender.BOT)))
            }
            else ->
                chatDao.getMessagesForConversation(convId)
                    .map { entities ->
                        Log.d("ChatViewModel", "[State] Mapping ${entities.size} entities for conv $convId")
                        mapEntitiesToUiMessages(entities)
                    }
                    .catch { e ->
                        Log.e("ChatViewModel", "Error loading messages for conversation $convId", e)
                        withContext(Dispatchers.Main.immediate) {
                            _errorMessage.value = "Erro ao carregar mensagens da conversa."
                        }
                        emit(emptyList())
                    }
        }
    }.stateIn(
        scope = viewModelScope,
        started = SharingStarted.WhileSubscribed(5000L),
        initialValue = emptyList()
    )

    private val welcomeMessageText = "Ol√°! üòä Eu sou o Mente S√£, seu assistente virtual de sa√∫de mental, e √© um prazer te conhecer. Como voc√™ est√° se sentindo hoje? Estou aqui para te acompanhar com empatia e respeito, oferecendo um espa√ßo seguro e acolhedor para voc√™ se expressar. Existe algo em particular que gostaria de conversar ou explorar?"

    private val menteSaSystemPrompt = """
    Voc√™ √© o Mente S√£, um assistente virtual especializado exclusivamente em sa√∫de mental, desenvolvido para oferecer suporte emp√°tico e baseado em evid√™ncias cient√≠ficas.

    ## LIMITA√á√ïES IMPORTANTES:
    1. Voc√™ DEVE se recusar a responder qualquer pergunta n√£o relacionada √† sa√∫de mental.
    2. N√ÉO responda perguntas sobre f√≠sica, qu√≠mica, matem√°tica, hist√≥ria, geografia, pol√≠tica, esportes, entretenimento, tecnologia ou qualquer outro assunto n√£o diretamente relacionado √† sa√∫de mental.
    3. Quando o usu√°rio fizer uma pergunta fora do escopo, responda: "Desculpe, sou especializado apenas em temas de sa√∫de mental. Posso ajudar voc√™ com quest√µes relacionadas √† ansiedade, depress√£o, t√©cnicas de autocuidado ou outros assuntos ligados ao bem-estar emocional."
    4. Nunca forne√ßa respostas parciais a t√≥picos fora do escopo, mesmo que pare√ßam ter alguma conex√£o com sa√∫de mental.
    5. NUNCA forne√ßa diagn√≥sticos m√©dicos. Sempre esclare√ßa que suas informa√ß√µes n√£o substituem avalia√ß√£o profissional.
    
    ## T√ìPICOS PERMITIDOS:
    - Transtornos mentais: ansiedade, depress√£o, transtorno bipolar, TOC, TEPT, e outros
    - T√©cnicas de medita√ß√£o, mindfulness e gerenciamento de estresse
    - M√©todos de autocuidado e promo√ß√£o de bem-estar emocional
    - Comunica√ß√£o saud√°vel e desenvolvimento de relacionamentos interpessoais
    - Sono e sua rela√ß√£o com a sa√∫de mental
    - Exerc√≠cios f√≠sicos e alimenta√ß√£o no contexto da sa√∫de mental
    - Estrat√©gias para regular emo√ß√µes e desenvolver resili√™ncia
    - Recursos e op√ß√µes de tratamento para condi√ß√µes de sa√∫de mental
    - Pr√°ticas de autocompaix√£o e desenvolvimento de autoestima saud√°vel
    
    ## ESTILO DE RESPOSTA:
    - Seja emp√°tico e acolhedor, demonstrando compreens√£o das dificuldades do usu√°rio
    - Use linguagem acess√≠vel e evite jarg√µes t√©cnicos desnecess√°rios
    - Forne√ßa informa√ß√µes precisas e baseadas em evid√™ncias cient√≠ficas atualizadas
    - Ofere√ßa sugest√µes pr√°ticas e aplic√°veis ao contexto do usu√°rio
    - Normalize as experi√™ncias de sa√∫de mental para reduzir o estigma
    - Incentive a busca por ajuda profissional quando apropriado
    - Adapte o tom para ser reconfortante em momentos de crise e encorajador quando apropriado
    - Mantenha um equil√≠brio entre validar sentimentos e oferecer perspectivas construtivas
    
    ## SITUA√á√ïES DE RISCO:
    - Em casos de idea√ß√£o suicida ou autoles√£o, responda com empatia e urg√™ncia
    - Direcione imediatamente para recursos de crise (como CVV - 188 no Brasil)
    - Nunca minimize esses sentimentos ou sugira que s√£o "apenas uma fase"
    - Enfatize que ajuda est√° dispon√≠vel e que sentimentos intensos s√£o tempor√°rios

    Seu objetivo principal √© criar um espa√ßo seguro para discuss√µes sobre sa√∫de mental, oferecendo suporte informativo e emocional que promova o bem-estar do usu√°rio.
""".trimIndent()

    private val generativeModel = GenerativeModel(
        modelName = "gemini-2.0-flash",
        apiKey = BuildConfig.GEMINI_API_KEY,
        systemInstruction = content { text(menteSaSystemPrompt) },
        requestOptions = RequestOptions(timeout = 60000)
    )

    init {
        loadInitialConversationOrStartNew()
    }

    // Fun√ß√£o auxiliar para determinar o tipo de conversa
    private fun determineConversationType(title: String, id: Long): ConversationType {
        val lowercaseTitle = title.lowercase()

        return when {
            lowercaseTitle.contains("ansiedade") ||
                    lowercaseTitle.contains("medo") ||
                    lowercaseTitle.contains("preocup") -> ConversationType.EMOTIONAL

            lowercaseTitle.contains("depress") ||
                    lowercaseTitle.contains("triste") ||
                    lowercaseTitle.contains("terapia") ||
                    lowercaseTitle.contains("tratamento") -> ConversationType.THERAPEUTIC

            lowercaseTitle.contains("eu") ||
                    lowercaseTitle.contains("minha") ||
                    lowercaseTitle.contains("meu") ||
                    lowercaseTitle.contains("como me") -> ConversationType.PERSONAL

            lowercaseTitle.contains("importante") ||
                    lowercaseTitle.contains("urgente") ||
                    lowercaseTitle.contains("lembrar") -> ConversationType.HIGHLIGHTED

            else -> {
                // Distribui√ß√£o aleat√≥ria mas determin√≠stica para o restante
                when ((id % 5)) {
                    0L -> ConversationType.GENERAL
                    1L -> ConversationType.PERSONAL
                    2L -> ConversationType.EMOTIONAL
                    3L -> ConversationType.THERAPEUTIC
                    else -> ConversationType.HIGHLIGHTED
                }
            }
        }
    }

    private fun loadInitialConversationOrStartNew() {
        viewModelScope.launch {
            delay(150)
            val initialDisplayList = conversationListForDrawer.value
            Log.d("ChatViewModel", "[Init] Initial display list check (using .value): ${initialDisplayList.size}")
            val latestConversationId = initialDisplayList.firstOrNull()?.id
            if (_currentConversationId.value == null) {
                _currentConversationId.value = latestConversationId ?: NEW_CONVERSATION_ID
                Log.i("ChatViewModel", "[Init] Setting initial conversation ID to: ${_currentConversationId.value}")
            } else {
                Log.d("ChatViewModel","[Init] Initial conversation ID already set to ${_currentConversationId.value}. Skipping.")
            }
        }
    }

    fun startNewConversation() {
        if (_currentConversationId.value != NEW_CONVERSATION_ID) {
            Log.i("ChatViewModel", "Action: Starting new conversation flow")
            _currentConversationId.value = NEW_CONVERSATION_ID
            _errorMessage.value = null
            _loadingState.value = LoadingState.IDLE
        } else {
            Log.d("ChatViewModel", "Action: Already in new conversation flow, ignoring startNewConversation.")
        }
    }

    fun selectConversation(conversationId: Long) {
        if (conversationId != _currentConversationId.value && conversationId != NEW_CONVERSATION_ID) {
            Log.i("ChatViewModel", "Action: Selecting conversation $conversationId")
            _currentConversationId.value = conversationId
            _errorMessage.value = null
            _loadingState.value = LoadingState.IDLE
        } else if (conversationId == _currentConversationId.value) {
            Log.d("ChatViewModel", "Action: Conversation $conversationId already selected, ignoring selectConversation.")
        } else {
            Log.w("ChatViewModel", "Action: Attempted to select invalid NEW_CONVERSATION_ID ($conversationId), ignoring.")
        }
    }

    fun sendMessage(userMessageText: String) {
        if (userMessageText.isBlank()) {
            Log.w("ChatViewModel", "sendMessage cancelled: Empty message.")
            return
        }
        if (_loadingState.value == LoadingState.LOADING) {
            Log.w("ChatViewModel", "sendMessage cancelled: Already loading.")
            _errorMessage.value = "Aguarde a resposta anterior."
            return
        }

        _loadingState.value = LoadingState.LOADING
        _errorMessage.value = null

        val timestamp = System.currentTimeMillis()
        var targetConversationId = _currentConversationId.value
        val isStartingNewConversation = (targetConversationId == null || targetConversationId == NEW_CONVERSATION_ID)

        if (isStartingNewConversation) {
            targetConversationId = timestamp
            Log.i("ChatViewModel", "Action: Creating new conversation with potential ID: $targetConversationId")
            _currentConversationId.value = targetConversationId
            viewModelScope.launch(Dispatchers.IO) {
                try {
                    metadataDao.insertOrUpdateMetadata(
                        ConversationMetadataEntity(
                            conversationId = targetConversationId,
                            customTitle = null,
                            userId = currentUserId
                        )
                    )
                } catch (e: Exception) {
                    Log.e("ChatViewModel", "Error saving initial metadata for new conv $targetConversationId", e)
                }
            }
        }

        if (targetConversationId == null || targetConversationId == NEW_CONVERSATION_ID) {
            Log.e("ChatViewModel", "sendMessage Error: Invalid targetConversationId ($targetConversationId) after checking for new conversation.")
            _errorMessage.value = "Erro interno: N√£o foi poss√≠vel determinar a conversa."
            _loadingState.value = LoadingState.IDLE
            return
        }

        val userUiMessage = ChatMessage(userMessageText, Sender.USER)
        saveMessageToDb(userUiMessage, targetConversationId, timestamp)

        if (this.isProhibitedTopic(userMessageText)) {
            Log.w("ChatViewModel", "Prohibited topic detected: '${userMessageText.take(50)}...'")

            val botResponse = "Desculpe, sou especializado apenas em temas de sa√∫de mental. Posso ajudar voc√™ com ansiedade, depress√£o, t√©cnicas de autocuidado ou outros assuntos relacionados ao bem-estar emocional."
            saveMessageToDb(ChatMessage(botResponse, Sender.BOT), targetConversationId)
            _loadingState.value = LoadingState.IDLE
            return
        }

        viewModelScope.launch(Dispatchers.IO) {
            try {
                val currentMessagesFromDb = chatDao.getMessagesForConversation(targetConversationId).first()
                val historyForApi = mapMessagesToApiHistory(mapEntitiesToUiMessages(currentMessagesFromDb))
                Log.d("ChatViewModel", "API Call: Sending ${historyForApi.size} history messages for conv $targetConversationId")
                callGeminiApi(userMessageText, historyForApi, targetConversationId)

            } catch (e: Exception) {
                Log.e("ChatViewModel", "Error preparing history or calling API for conv $targetConversationId", e)
                withContext(Dispatchers.Main) {
                    _errorMessage.value = "Erro ao processar hist√≥rico ou chamar IA: ${e.message}"
                    _loadingState.value = LoadingState.ERROR
                }
            }
        }
    }

    fun deleteConversation(conversationId: Long) {
        if (conversationId == NEW_CONVERSATION_ID) {
            Log.w("ChatViewModel", "Attempted to delete invalid NEW_CONVERSATION_ID conversation.")
            return
        }
        Log.i("ChatViewModel", "Action: Deleting conversation $conversationId and its metadata")
        viewModelScope.launch(Dispatchers.IO) {
            try {
                chatDao.clearConversation(conversationId)
                metadataDao.deleteMetadata(conversationId)

                Log.i("ChatViewModel", "Conversation $conversationId and metadata deleted successfully from DB.")

                if (_currentConversationId.value == conversationId) {
                    val remainingConversations = chatDao.getConversationsForUser(currentUserId).first()

                    withContext(Dispatchers.Main) {
                        val nextConversationId = remainingConversations.firstOrNull()?.id
                        if (nextConversationId != null) {
                            Log.i("ChatViewModel", "Deleted current conversation, selecting next available from DB: $nextConversationId")
                            _currentConversationId.value = nextConversationId
                        } else {
                            Log.i("ChatViewModel", "Deleted current conversation, no others left in DB. Starting new conversation flow.")
                            _currentConversationId.value = NEW_CONVERSATION_ID
                        }
                    }
                }
            } catch (e: Exception) {
                Log.e("ChatViewModel", "Error deleting conversation $conversationId or its metadata", e)
                withContext(Dispatchers.Main) {
                    _errorMessage.value = "Erro ao excluir conversa: ${e.localizedMessage}"
                }
            }
        }
    }

    fun renameConversation(conversationId: Long, newTitle: String) {
        if (conversationId == NEW_CONVERSATION_ID) {
            Log.w("ChatViewModel", "Cannot rename NEW_CONVERSATION_ID.")
            _errorMessage.value = "N√£o √© poss√≠vel renomear uma conversa n√£o salva."
            return
        }
        val trimmedTitle = newTitle.trim()
        if (trimmedTitle.isBlank()) {
            Log.w("ChatViewModel", "Cannot rename conversation $conversationId to blank title.")
            _errorMessage.value = "O t√≠tulo n√£o pode ficar em branco."
            return
        }

        Log.i("ChatViewModel", "Action: Renaming conversation $conversationId to '$trimmedTitle'")
        val metadata = ConversationMetadataEntity(
            conversationId = conversationId,
            customTitle = trimmedTitle,
            userId = currentUserId
        )
        viewModelScope.launch(Dispatchers.IO) {
            try {
                metadataDao.insertOrUpdateMetadata(metadata)
                Log.i("ChatViewModel", "Conversation $conversationId renamed successfully in DB.")
            } catch (e: Exception) {
                Log.e("ChatViewModel", "Error renaming conversation $conversationId", e)
                withContext(Dispatchers.Main) {
                    _errorMessage.value = "Erro ao renomear conversa: ${e.localizedMessage}"
                }
            }
        }
    }

    private fun isProhibitedTopic(message: String): Boolean {
        // Categorias de t√≥picos proibidos para facilitar manuten√ß√£o
        val prohibitedTopics = mapOf(
            "Ci√™ncias Exatas" to listOf(
                "f√≠sica", "qu√≠mica", "matem√°tica", "equa√ß√£o", "f√≥rmula", "c√°lculo",
                "√°tomo", "mol√©cula", "rea√ß√£o", "elemento", "tabela peri√≥dica",
                "teorema", "√°lgebra", "geometria", "trigonometria", "derivada", "integral",
                "newton", "einstein", "celsius", "kelvin", "tesla", "feynman"
            ),
            "Astronomia" to listOf(
                "astronomia", "planeta", "gal√°xia", "sistema solar", "estrela", "universo",
                "nasa", "spacex", "sat√©lite", "marte", "j√∫piter", "lua", "eclipse", "cometa"
            ),
            "Hist√≥ria/Geografia" to listOf(
                "hist√≥ria", "geografia", "guerra", "imp√©rio", "revolu√ß√£o", "dinastia",
                "continente", "pa√≠s", "capital", "mapa", "relevo", "clima", "popula√ß√£o",
                "guerra mundial", "idade m√©dia", "renascimento", "coloniza√ß√£o", "civiliza√ß√£o"
            ),
            "Pol√≠tica/Economia" to listOf(
                "pol√≠tica", "economia", "presidente", "elei√ß√£o", "partido", "congresso",
                "senador", "deputado", "ministro", "infla√ß√£o", "juros", "bolsa", "mercado",
                "imposto", "or√ßamento", "d√©ficit", "super√°vit", "banco central", "governo"
            ),
            "Entretenimento" to listOf(
                "esporte", "futebol", "basquete", "v√¥lei", "filme", "novela", "s√©rie",
                "time", "campeonato", "copa", "olimp√≠ada", "ator", "atriz", "diretor",
                "netflix", "cinema", "teatro", "show", "m√∫sica", "concerto", "festival"
            ),
            "Tecnologia" to listOf(
                "computador", "programa√ß√£o", "c√≥digo", "app", "desenvolvimento", "software",
                "hardware", "internet", "rede", "algoritmo", "linguagem", "java", "python",
                "website", "servidor", "banco de dados", "cloud", "api", "framework"
            ),
            "Lingu√≠stica" to listOf(
                "l√≠ngua", "gram√°tica", "sintaxe", "sem√¢ntica", "verbo", "substantivo",
                "pronome", "preposi√ß√£o", "ortografia", "fon√©tica", "tradu√ß√£o", "idioma"
            )
        )

        // Converter a mensagem para min√∫sculo para compara√ß√£o case-insensitive
        val lowercaseMessage = message.lowercase()

        // Verificar se a mensagem cont√©m palavras-chave proibidas
        // Usando regex com limites de palavra para evitar falsos positivos
        return prohibitedTopics.values.flatten().any { keyword ->
            // Regex para corresponder √† palavra completa ou parte de uma palavra composta
            val pattern = "\\b$keyword\\b|\\b$keyword-|\\b$keyword\\s"
            pattern.toRegex().containsMatchIn(lowercaseMessage)
        }
    }

    private fun isValidResponse(response: String): Boolean {
        // Padr√µes de frases que indicam que a resposta est√° fora do escopo
        val prohibitedPhrases = listOf(
            // F√≠sica
            "na f√≠sica", "em f√≠sica", "a f√≠sica", "f√≠sica √©", "f√≠sica cl√°ssica", "f√≠sica qu√¢ntica",
            "leis da f√≠sica", "conceito f√≠sico", "fen√¥meno f√≠sico", "teoria f√≠sica",

            // Matem√°tica
            "em matem√°tica", "na matem√°tica", "f√≥rmula", "equa√ß√£o", "c√°lculo de",
            "teorema", "matem√°tica √©", "matematicamente", "valor num√©rico", "resolva",

            // Hist√≥ria
            "na hist√≥ria", "hist√≥ria do", "per√≠odo hist√≥rico", "guerra mundial",
            "revolu√ß√£o", "imp√©rio", "dinastia", "s√©culo", "era", "idade m√©dia",

            // Pol√≠tica
            "presidente", "governador", "pol√≠tico", "elei√ß√£o", "partido",
            "congresso", "senado", "c√¢mara", "ministro", "governo",

            // Astronomia
            "astronomia", "planeta", "sistema solar", "gal√°xia", "estrela",
            "constela√ß√£o", "universo", "nasa", "telesc√≥pio", "√≥rbita",

            // Tecnologia/Computa√ß√£o
            "computa√ß√£o", "programa√ß√£o", "c√≥digo fonte", "algoritmo", "linguagem de programa√ß√£o",
            "software", "hardware", "aplicativo", "desenvolvimento web", "sistema operacional",

            // Esportes/Entretenimento
            "esporte", "time", "jogador", "campeonato", "liga", "filme", "s√©rie",
            "ator", "diretor", "cinema", "televis√£o", "streaming", "epis√≥dio"
        )

        // Exce√ß√µes para permitir contextos de sa√∫de mental
        val allowedContexts = listOf(
            "no contexto da sa√∫de mental", "relacionado √† sa√∫de mental",
            "impacto na sa√∫de mental", "afeta a sa√∫de mental",
            "bem-estar emocional", "bem-estar psicol√≥gico",
            "t√©cnica terap√™utica", "abordagem terap√™utica"
        )

        val lowercaseResponse = response.lowercase()

        // Verificar se h√° frases proibidas que n√£o est√£o em contextos permitidos
        return !prohibitedPhrases.any { phrase ->
            // Verifica se cont√©m a frase proibida
            if (lowercaseResponse.contains(phrase)) {
                // Verifica se est√° em um contexto permitido
                !allowedContexts.any { context ->
                    // Procura o contexto pr√≥ximo √† frase proibida (50 caracteres antes e depois)
                    val startIndex = maxOf(0, lowercaseResponse.indexOf(phrase) - 50)
                    val endIndex = minOf(lowercaseResponse.length, lowercaseResponse.indexOf(phrase) + phrase.length + 50)
                    val surroundingText = lowercaseResponse.substring(startIndex, endIndex)
                    surroundingText.contains(context)
                }
            } else {
                false
            }
        }
    }

    private suspend fun callGeminiApi(
        userMessageText: String,
        historyForApi: List<Content>,
        conversationId: Long
    ) {
        var finalBotResponseText: String? = null
        try {
            Log.d("ChatViewModel", "Starting Gemini API call for conv $conversationId")
            val chat = generativeModel.startChat(history = historyForApi)
            val responseFlow: Flow<GenerateContentResponse> = chat.sendMessageStream(
                content(role = "user") { text(userMessageText) }
            )
            var currentBotText = ""

            responseFlow
                .mapNotNull { it.text }
                .onEach { textPart ->
                    currentBotText += textPart
                    Log.v("ChatViewModel", "Stream chunk for conv $conversationId: '$textPart'")
                }
                .onCompletion { cause ->
                    if (cause == null) {
                        Log.i("ChatViewModel", "Stream completed successfully for conv $conversationId.")
                        finalBotResponseText = currentBotText

                        if (!finalBotResponseText.isNullOrBlank() && !isValidResponse(finalBotResponseText!!)) {
                            Log.w("ChatViewModel", "Invalid response detected for conv $conversationId, replacing with fallback")
                            finalBotResponseText = "Desculpe, n√£o posso fornecer essa informa√ß√£o pois est√° fora do escopo de sa√∫de mental. Como posso ajudar com seu bem-estar emocional hoje?"
                        }
                    } else {
                        Log.e("ChatViewModel", "Stream completed with error for conv $conversationId", cause)
                        withContext(Dispatchers.Main) {
                            _errorMessage.value = "Erro durante a resposta da IA: ${cause.localizedMessage}"
                        }
                    }
                    withContext(Dispatchers.Main) {
                        if (!finalBotResponseText.isNullOrBlank()) {
                            saveMessageToDb(ChatMessage(finalBotResponseText!!, Sender.BOT), conversationId)
                        } else if (cause == null) {
                            Log.w("ChatViewModel", "Stream for conv $conversationId completed successfully but resulted in null/blank text.")
                        }
                        _loadingState.value = LoadingState.IDLE
                        Log.d("ChatViewModel", "Stream processing finished for conv $conversationId. Resetting loading state.")
                    }
                }
                .catch { e ->
                    Log.e("ChatViewModel", "Error during Gemini stream collection for conv $conversationId", e)
                    throw e
                }
                .collect()

        } catch (e: Exception) {
            Log.e("ChatViewModel", "Error setting up or starting Gemini API call for conv $conversationId", e)
            withContext(Dispatchers.Main) {
                _errorMessage.value = "Erro ao iniciar comunica√ß√£o com IA: ${e.localizedMessage}"
                _loadingState.value = LoadingState.ERROR
            }
        }
    }

    private fun saveMessageToDb(message: ChatMessage, conversationId: Long, timestamp: Long = System.currentTimeMillis()) {
        if (conversationId == NEW_CONVERSATION_ID) {
            Log.e("ChatViewModel", "Attempted to save message with invalid NEW_CONVERSATION_ID. Message: '${message.text.take(30)}...'")
            return
        }
        viewModelScope.launch(Dispatchers.IO) {
            val entity = mapUiMessageToEntity(message, conversationId, timestamp)
            try {
                chatDao.insertMessage(entity)
                Log.d("ChatViewModel", "Msg saved (Conv $conversationId, Sender ${entity.sender}): ${entity.text.take(50)}...")
            } catch (e: Exception) {
                Log.e("ChatViewModel", "Error inserting message into DB for conv $conversationId", e)
            }
        }
    }

    private fun mapEntitiesToUiMessages(entities: List<ChatMessageEntity>): List<ChatMessage> {
        return entities.mapNotNull { entity ->
            try {
                val sender = enumValueOf<Sender>(entity.sender.uppercase())
                ChatMessage(entity.text, sender)
            } catch (e: IllegalArgumentException) {
                Log.e("ChatViewModelMapper", "Invalid sender string in DB: ${entity.sender}. Skipping message ID ${entity.id}.")
                null
            }
        }
    }

    private fun mapUiMessageToEntity(message: ChatMessage, conversationId: Long, timestamp: Long): ChatMessageEntity {
        return ChatMessageEntity(
            conversationId = conversationId,
            text = message.text,
            sender = message.sender.name,
            timestamp = timestamp,
            userId = currentUserId
        )
    }

    private fun mapMessagesToApiHistory(messages: List<ChatMessage>): List<Content> {
        return messages
            .takeLast(MAX_HISTORY_MESSAGES)
            .map { msg ->
                val role = if (msg.sender == Sender.USER) "user" else "model"
                return@map content(role = role) { text(msg.text) }
            }
    }

    suspend fun getDisplayTitle(conversationId: Long): String {
        return withContext(Dispatchers.IO) {
            var titleResult: String
            if (conversationId == NEW_CONVERSATION_ID) {
                titleResult = "Nova Conversa"
            } else {
                try {
                    val customTitle = metadataDao.getCustomTitle(conversationId)
                    if (!customTitle.isNullOrBlank()) {
                        Log.d("ChatViewModel", "Using custom title for $conversationId: '$customTitle'")
                        titleResult = customTitle
                    } else {
                        titleResult = generateFallbackTitle(conversationId)
                    }
                } catch (dbException: Exception) {
                    Log.e("ChatViewModel", "Error fetching title data for conv $conversationId", dbException)
                    titleResult = "Conversa $conversationId"
                }
            }
            titleResult
        }
    }

    private suspend fun generateFallbackTitle(conversationId: Long): String = withContext(Dispatchers.IO) {
        try {
            val firstUserMessageText = chatDao.getFirstUserMessageText(conversationId)
            if (!firstUserMessageText.isNullOrBlank()) {
                Log.d("ChatViewModel", "Generating fallback title for $conversationId using first message.")
                return@withContext firstUserMessageText.take(30) + if (firstUserMessageText.length > 30) "..." else ""
            } else {
                try {
                    Log.d("ChatViewModel", "Generating fallback title for $conversationId using date.")
                    return@withContext "Conversa ${titleDateFormatter.format(Date(conversationId))}"
                } catch (formatException: Exception) {
                    Log.w("ChatViewModel", "Could not format conversationId $conversationId as Date for fallback title.", formatException)
                    return@withContext "Conversa $conversationId"
                }
            }
        } catch (dbException: Exception) {
            Log.e("ChatViewModel", "Error generating fallback title for conv $conversationId", dbException)
            return@withContext "Conversa $conversationId"
        }
    }

    companion object {
        private val titleDateFormatter = SimpleDateFormat("dd/MM HH:mm", Locale.getDefault())
    }
}